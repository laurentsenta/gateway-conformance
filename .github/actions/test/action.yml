name: "Gateway Conformance Tests"
description: "Runs the Gateway Conformance Tests"
inputs:
  gateway-url:
    description: "The URL of the IPFS Gateway implementation to be tested."
    required: true
  subdomain-url:
    description: "The Subdomain URL of the IPFS Gateway implementation to be tested."
    default: "http://example.com"
    required: false
  json:
    description: "The path where the JSON test report should be generated."
    required: true
    default: "report.json"
  xml:
    description: "The path where the JUnit XML test report should be generated."
    required: false
  html:
    description: "The path where the one-page HTML test report should be generated."
    required: false
  markdown:
    description: "The path where the summary Markdown test report should be generated."
    required: false
  specs:
    description: "A comma-separated list of specs to be tested. Accepts a spec (test only this spec), a +spec (test also this immature spec), or a -spec (do not test this mature spec)."
    required: false
    default: ""
  args:
    description: "[DANGER] The `args` input allows you to pass custom, free-text arguments directly to the Go test command that the tool employs to execute tests."
    required: false
runs:
  using: "composite"
  steps:
    - id: github
      uses: laurentsenta/docker-container-action/.github/actions/github@main
    - name: Run the test
      uses: laurentsenta/docker-container-action@main
      env:
        URL: ${{ inputs.gateway-url }}
        SUBDOMAIN: ${{ inputs.subdomain-url }}
        JSON: ${{ inputs.json }}
        SPECS: ${{ inputs.specs }}
      with:
        repository: ${{ steps.github.outputs.action_repository }}
        ref: ${{ steps.github.outputs.action_ref }}
        dockerfile: Dockerfile
        opts: --network=host
        args: test --url="$URL" --json="$JSON" --specs="$SPECS" --subdomain-url="$SUBDOMAIN" -- ${{ inputs.args }}
        build-args: --build-arg VERSION="${{ github.head_ref || github.ref_name }}"
    - name: Create the XML
      if: (inputs.xml || inputs.html || inputs.markdown) && (failure() || success())
      uses: pl-strflt/gotest-json-to-junit-xml@v1
      with:
        input: ${{ inputs.json }}
        output: ${{ inputs.xml }}
    - name: Create the HTML
      if: inputs.html && (failure() || success())
      uses: pl-strflt/junit-xml-to-html@v1
      with:
        mode: no-frames
        input: ${{ inputs.xml }}
        output: ${{ inputs.html }}
    - name: Create the HTML
      if: inputs.markdown && (failure() || success())
      uses: pl-strflt/junit-xml-to-html@v1
      with:
        mode: summary
        input: ${{ inputs.xml }}
        output: ${{ inputs.markdown }}
